<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                        
<!-- 네임스페이스(사용영역) 설정 -->
<mapper namespace="com.ezen.mybatis.domain.member.mapper.MemberMapper">

	<!-- select 태그를 이용하여 전체사원 조회를 위한 SQL 매핑 -->
	<select id="findAll" resultType="Member" >
		SELECT id                      			AS "id", 
		       passwd                     		AS "passwd", 
		       name                      		AS "name", 
		       email                            AS "email", 
		       TO_CHAR(regdate, 'YYYY-MM-DD') 	AS "regdate"
		FROM   member
		ORDER  BY regdate ASC
	</select>
	
	<!-- 아이디로 회원 조회 -->
	<!-- resultType에 별칭 사용 -->
	<select id="findById"  parameterType="string" resultType="Member">
	<!-- <select id="findById"  parameterType="java.lang.Integer" resultType="Employee"> -->
		SELECT id                      			AS "id", 
		       passwd                     		AS "passwd", 
		       name                      		AS "name", 
		       email                            AS "email", 
		       TO_CHAR(regdate, 'YYYY-MM-DD') 	AS "regdate"
		FROM   member
		WHERE  id = #{value} 
	</select>
	
	<!-- 이름으로 회원 와일드카드 검색(like 검색) -->
   <select id="findByName"  parameterType="string" resultType="Member">
      SELECT id                      			AS "id", 
             passwd                				AS "passwd", 
             name                    			AS "name", 
             email                   			AS "email", 
             TO_CHAR(regdate, 'YYYY-MM-DD') 	AS "regdate"
      FROM   member 
      WHERE  UPPER(name) LIKE '%' || #{name} || '%' 
   </select>
   
   <!-- 아이디와 비밀번호로 회원 와일드카드 검색(like 검색) -->
   <select id="findByUser"  parameterType="string" resultType="Member">
      SELECT id                      			AS "id", 
             passwd                				AS "passwd", 
             name                    			AS "name", 
             email                   			AS "email", 
             TO_CHAR(regdate, 'YYYY-MM-DD') 	AS "regdate"
      FROM   member 
      WHERE  id = #{id} AND passwd = #{passwd}
   </select>
	
	<!-- 자주 사용되고, 자바빈의 속성이름과 테이블 컬럼이름이 다른 경우 resultMap 선언 -->
	<resultMap  id="member" type="com.ezen.mybatis.domain.member.dto.Member">
		<result property="id"           column="id"/>
		<result property="name"           column="name"/>
		<result property="email"        column="email"/>
		<result property="regdate"     column="regdate"/>
	</resultMap>
	
	<!-- 전체멤버 조회 -->
   <select id="findByAll2" resultMap="member">
      SELECT id                      AS "id", 
             passwd                	 AS "passwd", 
             name                    AS "name", 
             email                   AS "email",
             TO_CHAR(regdate, 'YYYY-MM-DD') 	AS "regdate",  
      FROM   member
      ORDER BY regdate ASC
   </select>
	
	<!-- 사원 등록 -->
	<insert id="create" parameterType="Member">
		INSERT INTO member 
                  (id, 
                   passwd,
                   name,
                   email, 
                   regdate) 
      VALUES     (#{id} 
                  #{passwd}, 
                  #{name}, 
                  #{email}, 
                  TO_DATE(#{regdate}, 'YYYY-MM-DD'), 
                  )
	</insert>
		
	<!-- 사원 정보 수정 
	<update id="update" parameterType="Member">
		UPDATE member
		SET    salary = #{salary}
		WHERE  employee_id = #{id}
	</update>-->
	
	<!-- 사원 정보 수정(set, if 태그를 이용한 동적 SQL) 
	<update id="update2" parameterType="Employee">
		UPDATE employees
		<set>
	        <if test="firstName != null">first_name = #{firstName},</if>
	        <if test="lastName != null">last_name = #{lastName},</if>
	        <if test="salary != null">salary = #{salary}</if>
	    </set>
	    WHERE employee_id = #{id}
	</update>-->
	
	<!-- 사원 삭제 -->
	<delete id="delete" parameterType="string">
		DELETE FROM member
		WHERE  id = #{value}
	</delete>
	
	<!-- 동적 SQL 
	<select id="search" parameterType="map" resultType="Member">
		SELECT employee_id  "id", 
		       first_name   "firstName", 
		       salary
		FROM   employees
		<if test="type != null">
			<choose>
				<when test="type == 'id'">
				WHERE employee_id = #{value}
				</when>
				<when test="type == 'name'">
				WHERE first_name like '%' || #{value}
				</when>
				<otherwise></otherwise>
			</choose>
		</if>
	</select>-->
</mapper>