[2023-09-06 08:56:45][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 08:56:45][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 08:56:45][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : The Class-Path manifest attribute in C:\Users\i7C-\.gradle\caches\modules-2\files-2.1\com.oracle.database.jdbc\ojdbc8\21.9.0.0\a68f29ad2376bdb8c04a87cda70c62907995855d\ojdbc8-21.9.0.0.jar referenced one or more files that do not exist: file:/C:/Users/i7C-/.gradle/caches/modules-2/files-2.1/com.oracle.database.jdbc/ojdbc8/21.9.0.0/a68f29ad2376bdb8c04a87cda70c62907995855d/oraclepki.jar
[2023-09-06 08:56:45][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[2023-09-06 08:56:45][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[2023-09-06 08:56:46][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 08:56:46][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 08:56:46][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 08:56:46][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 08:56:46][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 1337 ms
[2023-09-06 08:56:47][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 08:56:47][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 08:56:47][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 08:56:47][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 2.813 seconds (process running for 3.62)
[2023-09-06 08:56:59][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 08:56:59][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 08:56:59][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 3 ms
[2023-09-06 08:56:59][http-nio-80-exec-1][INFO ](LoggerInterceptor.java: preHandle(): 32) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 전) => /, ParameterizableViewController [view="index"]
[2023-09-06 08:56:59][http-nio-80-exec-1][INFO ](LoggerInterceptor.java: postHandle(): 39) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 후) => ModelAndView [view="index"; model={}]
[2023-09-06 08:56:59][http-nio-80-exec-1][INFO ](LoggerInterceptor.java: afterCompletion(): 45) : [로그 인터셉터 실행] : HTT 응답(뷰 렌더링 이후) => /
[2023-09-06 08:56:59][http-nio-80-exec-7][INFO ](LoggerInterceptor.java: preHandle(): 32) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 전) => /js/member.js, ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
[2023-09-06 08:56:59][http-nio-80-exec-6][INFO ](LoggerInterceptor.java: preHandle(): 32) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 전) => /js/validator.js, ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
[2023-09-06 08:56:59][http-nio-80-exec-6][INFO ](LoggerInterceptor.java: postHandle(): 39) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 후) => null
[2023-09-06 08:56:59][http-nio-80-exec-7][INFO ](LoggerInterceptor.java: postHandle(): 39) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 후) => null
[2023-09-06 08:56:59][http-nio-80-exec-6][INFO ](LoggerInterceptor.java: afterCompletion(): 45) : [로그 인터셉터 실행] : HTT 응답(뷰 렌더링 이후) => /js/validator.js
[2023-09-06 08:56:59][http-nio-80-exec-7][INFO ](LoggerInterceptor.java: afterCompletion(): 45) : [로그 인터셉터 실행] : HTT 응답(뷰 렌더링 이후) => /js/member.js
[2023-09-06 08:57:14][http-nio-80-exec-5][INFO ](LoggerInterceptor.java: preHandle(): 32) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 전) => /member/rest/bangry1, com.ezen.springmvc.web.member.controller.MemberController#read(String)
[2023-09-06 08:57:14][http-nio-80-exec-5][WARN ](LocalVariableTableParameterNameDiscoverer.java: inspectClass(): 123) : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: com.ezen.springmvc.web.member.controller.MemberController
[2023-09-06 08:57:14][http-nio-80-exec-5][ERROR](ControllerExceptionAdvice.java: exception4xxHandle(): 27) : [Client 요청 오류] : {}
java.lang.IllegalArgumentException: 잘못된 값을 입력하였습니다.
	at com.ezen.springmvc.web.member.controller.MemberController.read(MemberController.java:178)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
[2023-09-06 08:57:14][http-nio-80-exec-5][WARN ](AbstractHandlerExceptionResolver.java: logException(): 207) : Resolved [java.lang.IllegalArgumentException: 잘못된 값을 입력하였습니다.]
[2023-09-06 08:57:14][http-nio-80-exec-5][INFO ](LoggerInterceptor.java: afterCompletion(): 45) : [로그 인터셉터 실행] : HTT 응답(뷰 렌더링 이후) => /member/rest/bangry1
[2023-09-06 08:57:28][http-nio-80-exec-2][INFO ](LoggerInterceptor.java: preHandle(): 32) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 전) => /member/rest/bangry2, com.ezen.springmvc.web.member.controller.MemberController#read(String)
[2023-09-06 08:57:28][http-nio-80-exec-2][ERROR](ControllerExceptionAdvice.java: exception5xxHandle(): 34) : [Server 응답 오류] : {}
java.lang.RuntimeException: 서버 장애가 발생하였습니다.
	at com.ezen.springmvc.web.member.controller.MemberController.read(MemberController.java:182)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
[2023-09-06 08:57:28][http-nio-80-exec-2][WARN ](AbstractHandlerExceptionResolver.java: logException(): 207) : Resolved [java.lang.RuntimeException: 서버 장애가 발생하였습니다.]
[2023-09-06 08:57:28][http-nio-80-exec-2][INFO ](LoggerInterceptor.java: afterCompletion(): 45) : [로그 인터셉터 실행] : HTT 응답(뷰 렌더링 이후) => /member/rest/bangry2
[2023-09-06 08:57:32][http-nio-80-exec-4][INFO ](LoggerInterceptor.java: preHandle(): 32) : [로그 인터셉터 실행] : HTTP 요청(세부 컨트롤러 호출 전) => /member/rest/bangry3, com.ezen.springmvc.web.member.controller.MemberController#read(String)
[2023-09-06 08:57:32][http-nio-80-exec-4][ERROR](ControllerExceptionAdvice.java: userExcptionHandle(): 40) : [User 응답 예외] : {}
com.ezen.springmvc.web.member.exception.MemberException: 인증되지 않은 사용자입니다.
	at com.ezen.springmvc.web.member.controller.MemberController.read(MemberController.java:186)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
[2023-09-06 08:57:32][http-nio-80-exec-4][WARN ](AbstractHandlerExceptionResolver.java: logException(): 207) : Resolved [com.ezen.springmvc.web.member.exception.MemberException: 인증되지 않은 사용자입니다.]
[2023-09-06 08:57:32][http-nio-80-exec-4][INFO ](LoggerInterceptor.java: afterCompletion(): 45) : [로그 인터셉터 실행] : HTT 응답(뷰 렌더링 이후) => /member/rest/bangry3
[2023-09-06 08:58:47][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 08:58:47][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 08:58:47][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 08:58:47][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 08:58:47][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 08:58:47][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 08:58:47][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 08:58:47][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 08:58:47][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 08:58:47][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 343 ms
[2023-09-06 08:58:47][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 08:58:48][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 08:58:48][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 08:58:48][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.997 seconds (process running for 124.083)
[2023-09-06 08:58:48][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 08:58:56][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 08:58:56][Thread-7][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 08:58:56][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 08:58:56][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 08:58:57][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 08:58:57][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 08:58:57][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 08:58:57][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 08:58:57][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 619 ms
[2023-09-06 08:58:58][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 08:58:58][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 08:58:58][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 08:58:58][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.26 seconds (process running for 134.082)
[2023-09-06 08:58:58][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 08:59:46][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 08:59:46][Thread-11][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 08:59:46][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 08:59:46][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 08:59:47][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 08:59:47][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 08:59:47][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 08:59:47][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 08:59:47][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 671 ms
[2023-09-06 08:59:47][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 08:59:47][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 08:59:47][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 08:59:47][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.072 seconds (process running for 183.619)
[2023-09-06 08:59:47][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:00:17][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:00:17][Thread-15][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:00:17][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:00:17][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:00:17][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:00:17][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:00:17][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:00:17][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:00:17][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 351 ms
[2023-09-06 09:00:18][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:00:18][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:00:18][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:00:18][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.909 seconds (process running for 214.28)
[2023-09-06 09:00:18][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:00:25][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:00:25][Thread-19][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:00:25][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:00:25][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:00:25][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:00:25][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:00:25][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:00:25][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:00:25][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 655 ms
[2023-09-06 09:00:26][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:00:26][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:00:26][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:00:26][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.078 seconds (process running for 222.219)
[2023-09-06 09:00:26][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:01:09][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:01:09][Thread-23][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:01:09][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:01:09][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:01:09][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:01:09][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:01:09][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:01:09][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:01:09][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 301 ms
[2023-09-06 09:01:10][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:01:10][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:01:10][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:01:10][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.141 seconds (process running for 266.284)
[2023-09-06 09:01:10][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:01:13][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:01:13][Thread-27][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:01:14][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:01:14][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:01:14][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:01:14][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:01:14][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:01:14][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:01:14][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 313 ms
[2023-09-06 09:01:14][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:01:14][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:01:14][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:01:14][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.752 seconds (process running for 270.675)
[2023-09-06 09:01:14][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:01:31][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:01:31][Thread-31][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:01:31][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:01:31][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:01:32][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:01:32][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:01:32][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:01:32][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:01:32][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 553 ms
[2023-09-06 09:01:32][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:01:33][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:01:33][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:01:33][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.232 seconds (process running for 288.934)
[2023-09-06 09:01:33][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:04:05][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:04:05][Thread-35][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:04:06][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9368 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:04:06][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:04:06][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:04:06][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:04:06][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:04:06][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:04:06][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 538 ms
[2023-09-06 09:04:06][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:04:07][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:04:07][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:04:07][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.976 seconds (process running for 442.909)
[2023-09-06 09:04:07][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:04:13][RMI TCP Connection(31)-127.0.0.1][INFO ](SpringApplicationAdminMXBeanRegistrar.java: shutdown(): 159) : Application shutdown requested.
[2023-09-06 09:04:13][RMI TCP Connection(31)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:04:15][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 1064 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:04:15][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:04:15][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : The Class-Path manifest attribute in C:\Users\i7C-\.gradle\caches\modules-2\files-2.1\com.oracle.database.jdbc\ojdbc8\21.9.0.0\a68f29ad2376bdb8c04a87cda70c62907995855d\ojdbc8-21.9.0.0.jar referenced one or more files that do not exist: file:/C:/Users/i7C-/.gradle/caches/modules-2/files-2.1/com.oracle.database.jdbc/ojdbc8/21.9.0.0/a68f29ad2376bdb8c04a87cda70c62907995855d/oraclepki.jar
[2023-09-06 09:04:15][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[2023-09-06 09:04:15][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[2023-09-06 09:04:16][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:04:16][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:04:16][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:04:16][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:04:16][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 1309 ms
[2023-09-06 09:04:17][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:04:17][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:04:17][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:04:17][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 2.761 seconds (process running for 3.495)
[2023-09-06 09:04:24][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:04:24][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:04:24][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:04:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:04:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolama
[2023-09-06 09:04:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:04:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolama
[2023-09-06 09:04:46][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:04:46][http-nio-80-exec-7][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-1 - Starting...
[2023-09-06 09:04:46][http-nio-80-exec-7][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:04:46][http-nio-80-exec-7][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-1 - Added connection oracle.jdbc.driver.T4CConnection@64a52e38
[2023-09-06 09:04:46][http-nio-80-exec-7][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-1 - Start completed.
[2023-09-06 09:04:46][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:04:46][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:04:46][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:04:46][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:04:46][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:04:46][http-nio-80-exec-4][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:04:46][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:04:46][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolama(String)
[2023-09-06 09:04:46][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String)
[2023-09-06 09:04:46][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:04:46][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](AbstractPlatformTransactionManager.java: getTransaction(): 370) : Creating new transaction with name [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](DataSourceTransactionManager.java: doBegin(): 271) : Acquired Connection [HikariProxyConnection@1394359036 wrapping oracle.jdbc.driver.T4CConnection@64a52e38] for JDBC transaction
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](DataSourceTransactionManager.java: doBegin(): 289) : Switching JDBC Connection [HikariProxyConnection@1394359036 wrapping oracle.jdbc.driver.T4CConnection@64a52e38] to manual commit
[2023-09-06 09:05:05][http-nio-80-exec-2][TRACE](TransactionAspectSupport.java: prepareTransactionInfo(): 629) : Getting transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:05:05][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.register(..)비즈니스 메소드 실행
[2023-09-06 09:05:05][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman, passwd=1111, name=졸라맨, email=jolaman@gmail.com, regdate=null)
[2023-09-06 09:05:05][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.create(..)비즈니스 메소드 실행
[2023-09-06 09:05:05][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman, passwd=1111, name=졸라맨, email=jolaman@gmail.com, regdate=null)
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: INSERT INTO member(id, passwd, name, email) VALUES(?, ?, ?, ?)
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String), 1111(String), 졸라맨(String), jolaman@gmail.com(String)
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==    Updates: 1
[2023-09-06 09:05:05][http-nio-80-exec-2][TRACE](TransactionAspectSupport.java: commitTransactionAfterReturning(): 658) : Completing transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](AbstractPlatformTransactionManager.java: processCommit(): 740) : Initiating transaction commit
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](DataSourceTransactionManager.java: doCommit(): 334) : Committing JDBC transaction on Connection [HikariProxyConnection@1394359036 wrapping oracle.jdbc.driver.T4CConnection@64a52e38]
[2023-09-06 09:05:05][http-nio-80-exec-2][DEBUG](DataSourceTransactionManager.java: doCleanupAfterCompletion(): 393) : Releasing JDBC Connection [HikariProxyConnection@1394359036 wrapping oracle.jdbc.driver.T4CConnection@64a52e38] after transaction
[2023-09-06 09:05:05][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman;jsessionid=70FA5ECF94854EA47AAE465D0EA5779B
[2023-09-06 09:05:05][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:05:36][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:05:36][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:05:36][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:05:36][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:05:36][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:05:36][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:05:36][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 53
[2023-09-06 09:11:25][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:11:25][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:11:25][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:11:25][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [oracle.jdbc.driver.BlockSource.ThreadedCachingBlockSource.BlockReleaser] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:258)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:240)
 app//oracle.jdbc.driver.BlockSource$ThreadedCachingBlockSource$BlockReleaser.run(BlockSource.java:345)
[2023-09-06 09:11:25][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [InterruptTimer] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Object.wait(Native Method)
 java.base@17.0.8/java.util.TimerThread.mainLoop(Timer.java:563)
 java.base@17.0.8/java.util.TimerThread.run(Timer.java:516)
[2023-09-06 09:11:25][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:11:25][Thread-5][INFO ](HikariDataSource.java: close(): 350) : HikariPool-1 - Shutdown initiated...
[2023-09-06 09:11:25][Thread-5][INFO ](HikariDataSource.java: close(): 352) : HikariPool-1 - Shutdown completed.
[2023-09-06 09:11:25][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 1064 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:11:25][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:11:26][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:11:26][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:11:26][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:11:26][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:11:26][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 388 ms
[2023-09-06 09:11:26][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:11:26][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:11:26][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:11:26][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.882 seconds (process running for 432.443)
[2023-09-06 09:11:26][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:11:42][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:11:42][Thread-11][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:11:42][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 1064 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:11:42][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:11:43][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:11:43][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:11:43][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:11:43][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:11:43][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 789 ms
[2023-09-06 09:11:43][restartedMain][WARN ](AbstractApplicationContext.java: refresh(): 616) : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'webConfig' defined in file [C:\ezen-fullstack\workspace\final_project_template\bin\main\com\ezen\springmvc\web\common\interceptor\WebConfig.class]: Failed to instantiate [com.ezen.springmvc.web.common.interceptor.WebConfig$$SpringCGLIB$$0]: Constructor threw exception
[2023-09-06 09:11:43][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:11:43][restartedMain][INFO ](ConditionEvaluationReportLogger.java: logMessage(): 82) : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
[2023-09-06 09:11:43][restartedMain][ERROR](SpringApplication.java: reportFailure(): 824) : Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'webConfig' defined in file [C:\ezen-fullstack\workspace\final_project_template\bin\main\com\ezen\springmvc\web\common\interceptor\WebConfig.class]: Failed to instantiate [com.ezen.springmvc.web.common.interceptor.WebConfig$$SpringCGLIB$$0]: Constructor threw exception
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1314) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1199) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:942) ~[spring-context-6.0.11.jar:6.0.11]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608) ~[spring-context-6.0.11.jar:6.0.11]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.1.2.jar:3.1.2]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734) ~[spring-boot-3.1.2.jar:3.1.2]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:436) ~[spring-boot-3.1.2.jar:3.1.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312) ~[spring-boot-3.1.2.jar:3.1.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306) ~[spring-boot-3.1.2.jar:3.1.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295) ~[spring-boot-3.1.2.jar:3.1.2]
	at com.ezen.springmvc.SpringMvcApplication.main(SpringMvcApplication.java:10) ~[main/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50) ~[spring-boot-devtools-3.1.2.jar:3.1.2]
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.ezen.springmvc.web.common.interceptor.WebConfig$$SpringCGLIB$$0]: Constructor threw exception
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:224) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87) ~[spring-beans-6.0.11.jar:6.0.11]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1308) ~[spring-beans-6.0.11.jar:6.0.11]
	... 22 common frames omitted
Caused by: java.lang.Error: Unresolved compilation problem: 
	Syntax error on token ",", delete this token

	at com.ezen.springmvc.web.common.interceptor.WebConfig.<init>(WebConfig.java:22) ~[main/:na]
	at com.ezen.springmvc.web.common.interceptor.WebConfig$$SpringCGLIB$$0.<init>(<generated>) ~[main/:na]
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:na]
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499) ~[na:na]
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480) ~[na:na]
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:198) ~[spring-beans-6.0.11.jar:6.0.11]
	... 24 common frames omitted
[2023-09-06 09:11:48][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 1064 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:11:48][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:11:48][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:11:48][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:11:48][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:11:48][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:11:48][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 329 ms
[2023-09-06 09:11:49][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:11:49][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:11:49][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:11:49][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.87 seconds (process running for 454.974)
[2023-09-06 09:11:49][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:12:35][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:12:36][Thread-15][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:12:36][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 1064 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:12:36][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:12:36][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:12:36][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:12:36][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:12:36][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:12:36][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 344 ms
[2023-09-06 09:12:36][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:12:36][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:12:36][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:12:36][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.731 seconds (process running for 502.59)
[2023-09-06 09:12:36][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:13:23][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:13:23][Thread-22][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:13:23][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 1064 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:13:23][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:13:24][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:13:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:13:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:13:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:13:24][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 459 ms
[2023-09-06 09:13:24][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:13:24][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:13:24][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:13:24][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.338 seconds (process running for 550.651)
[2023-09-06 09:13:24][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:13:28][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:13:28][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:13:28][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:13:33][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:13:33][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:13:33][http-nio-80-exec-2][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:13:33][http-nio-80-exec-2][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-2 - Starting...
[2023-09-06 09:13:33][http-nio-80-exec-2][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:13:33][http-nio-80-exec-2][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-2 - Added connection oracle.jdbc.driver.T4CConnection@5d823efb
[2023-09-06 09:13:33][http-nio-80-exec-2][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-2 - Start completed.
[2023-09-06 09:13:33][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:13:33][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:13:33][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:13:33][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 53
[2023-09-06 09:13:48][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:13:48][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:13:48][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:13:48][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:13:48][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:13:48][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:13:48][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String)
[2023-09-06 09:13:48][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:13:48][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06 09:05:05
[2023-09-06 09:13:48][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:13:49][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:13:49][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:13:49][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:13:49][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:13:49][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:13:49][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:13:49][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman2(String)
[2023-09-06 09:13:49][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](AbstractPlatformTransactionManager.java: getTransaction(): 370) : Creating new transaction with name [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doBegin(): 271) : Acquired Connection [HikariProxyConnection@1217256868 wrapping oracle.jdbc.driver.T4CConnection@5d823efb] for JDBC transaction
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doBegin(): 289) : Switching JDBC Connection [HikariProxyConnection@1217256868 wrapping oracle.jdbc.driver.T4CConnection@5d823efb] to manual commit
[2023-09-06 09:14:05][http-nio-80-exec-8][TRACE](TransactionAspectSupport.java: prepareTransactionInfo(): 629) : Getting transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:14:05][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.register(..)비즈니스 메소드 실행
[2023-09-06 09:14:05][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman2, passwd=1111, name=졸라맨2, email=jolaman2@gmail.com, regdate=null)
[2023-09-06 09:14:05][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.create(..)비즈니스 메소드 실행
[2023-09-06 09:14:05][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman2, passwd=1111, name=졸라맨2, email=jolaman2@gmail.com, regdate=null)
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: INSERT INTO member(id, passwd, name, email) VALUES(?, ?, ?, ?)
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman2(String), 1111(String), 졸라맨2(String), jolaman2@gmail.com(String)
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==    Updates: 1
[2023-09-06 09:14:05][http-nio-80-exec-8][TRACE](TransactionAspectSupport.java: commitTransactionAfterReturning(): 658) : Completing transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](AbstractPlatformTransactionManager.java: processCommit(): 740) : Initiating transaction commit
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doCommit(): 334) : Committing JDBC transaction on Connection [HikariProxyConnection@1217256868 wrapping oracle.jdbc.driver.T4CConnection@5d823efb]
[2023-09-06 09:14:05][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doCleanupAfterCompletion(): 393) : Releasing JDBC Connection [HikariProxyConnection@1217256868 wrapping oracle.jdbc.driver.T4CConnection@5d823efb] after transaction
[2023-09-06 09:14:05][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:14:05][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:14:05][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:14:05][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:14:05][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:05][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:14:05][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman2(String)
[2023-09-06 09:14:05][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:14:05][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06 09:14:05
[2023-09-06 09:14:05][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:14:14][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:14:14][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:14:14][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:14][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:14:14][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:14:14][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:14:14][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 54
[2023-09-06 09:14:18][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:14:18][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:14:18][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:14:18][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:14:18][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:18][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:14:18][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman2(String)
[2023-09-06 09:14:18][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:14:18][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06 09:14:05
[2023-09-06 09:14:18][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:14:36][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:14:36][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / dfdfdd
[2023-09-06 09:14:36][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:14:36][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / dfdfdd
[2023-09-06 09:14:36][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:36][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:14:36][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: dfdfdd(String)
[2023-09-06 09:14:36][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:14:40][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:14:40][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:14:40][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:14:40][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:14:40][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:40][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:14:40][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:14:40][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:14:40][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:14:40][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:14:42][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:14:42][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry1
[2023-09-06 09:14:42][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:14:42][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry1
[2023-09-06 09:14:42][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:42][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:14:42][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry1(String)
[2023-09-06 09:14:42][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:14:55][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:14:55][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:14:55][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:14:55][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:14:55][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:14:55][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:14:55][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:55][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:14:55][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:14:55][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:14:55][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:14:55][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:14:55][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:14:55][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:14:55][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:14:55][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:14:55][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:55][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:14:55][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String)
[2023-09-06 09:14:55][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:14:55][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06 09:05:05
[2023-09-06 09:14:55][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:14:59][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:14:59][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:14:59][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:14:59][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:14:59][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:14:59][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:14:59][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 54
[2023-09-06 09:15:01][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:15:01][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:15:01][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:15:01][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:15:01][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:15:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:15:01][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 54
[2023-09-06 09:15:10][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:15:10][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:15:10][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:15:10][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:15:10][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:15:10][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:15:10][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:15:10][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:15:10][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:15:10][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:15:55][http-nio-80-exec-3][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /board
[2023-09-06 09:15:55][http-nio-80-exec-3][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:16:11][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:16:11][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:11][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:16:11][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:11][http-nio-80-exec-10][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:16:11][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:16:11][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:16:11][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:16:11][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:16:11][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:16:27][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:16:27][Thread-26][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:16:27][Thread-26][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:16:27][Thread-26][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-2 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:16:27][Thread-26][INFO ](HikariDataSource.java: close(): 350) : HikariPool-2 - Shutdown initiated...
[2023-09-06 09:16:27][Thread-26][INFO ](HikariDataSource.java: close(): 352) : HikariPool-2 - Shutdown completed.
[2023-09-06 09:16:27][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 1064 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:16:27][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:16:27][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:16:27][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:16:27][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:16:27][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:16:27][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 299 ms
[2023-09-06 09:16:27][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:16:28][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:16:28][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:16:28][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.806 seconds (process running for 733.899)
[2023-09-06 09:16:28][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy102#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:29][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-3 - Starting...
[2023-09-06 09:16:29][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-3 - Added connection oracle.jdbc.driver.T4CConnection@3c2d6ecc
[2023-09-06 09:16:29][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-3 - Start completed.
[2023-09-06 09:16:29][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:16:29][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:16:29][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:16:29][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:16:29][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:16:32][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:16:32][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:32][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy102#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:16:32][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:32][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:16:32][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:16:32][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:16:32][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:16:32][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:16:32][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:16:45][RMI TCP Connection(37)-127.0.0.1][INFO ](SpringApplicationAdminMXBeanRegistrar.java: shutdown(): 159) : Application shutdown requested.
[2023-09-06 09:16:45][RMI TCP Connection(37)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:16:45][RMI TCP Connection(37)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:16:45][RMI TCP Connection(37)-127.0.0.1][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [OJDBC-WORKER-THREAD-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:401)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1061)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:16:45][RMI TCP Connection(37)-127.0.0.1][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-3 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:16:45][RMI TCP Connection(37)-127.0.0.1][INFO ](HikariDataSource.java: close(): 350) : HikariPool-3 - Shutdown initiated...
[2023-09-06 09:16:45][RMI TCP Connection(37)-127.0.0.1][INFO ](HikariDataSource.java: close(): 352) : HikariPool-3 - Shutdown completed.
[2023-09-06 09:16:47][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:16:47][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:16:47][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : The Class-Path manifest attribute in C:\Users\i7C-\.gradle\caches\modules-2\files-2.1\com.oracle.database.jdbc\ojdbc8\21.9.0.0\a68f29ad2376bdb8c04a87cda70c62907995855d\ojdbc8-21.9.0.0.jar referenced one or more files that do not exist: file:/C:/Users/i7C-/.gradle/caches/modules-2/files-2.1/com.oracle.database.jdbc/ojdbc8/21.9.0.0/a68f29ad2376bdb8c04a87cda70c62907995855d/oraclepki.jar
[2023-09-06 09:16:47][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[2023-09-06 09:16:47][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[2023-09-06 09:16:48][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:16:48][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:16:48][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:16:49][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:16:49][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 1303 ms
[2023-09-06 09:16:49][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:16:49][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:16:49][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:16:49][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 2.757 seconds (process running for 3.494)
[2023-09-06 09:16:55][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:16:55][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:16:55][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:16:56][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:16:56][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:56][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:16:56][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:16:56][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:16:56][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-1 - Starting...
[2023-09-06 09:16:56][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:16:56][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-1 - Added connection oracle.jdbc.driver.T4CConnection@3db0155c
[2023-09-06 09:16:56][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-1 - Start completed.
[2023-09-06 09:16:56][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:16:56][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:16:56][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:16:56][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:16:56][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:17:03][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:17:03][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:17:03][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:17:03][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [oracle.jdbc.driver.BlockSource.ThreadedCachingBlockSource.BlockReleaser] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:258)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:240)
 app//oracle.jdbc.driver.BlockSource$ThreadedCachingBlockSource$BlockReleaser.run(BlockSource.java:345)
[2023-09-06 09:17:03][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [InterruptTimer] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Object.wait(Native Method)
 java.base@17.0.8/java.util.TimerThread.mainLoop(Timer.java:563)
 java.base@17.0.8/java.util.TimerThread.run(Timer.java:516)
[2023-09-06 09:17:03][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [OJDBC-WORKER-THREAD-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:401)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1061)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:17:03][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:17:03][Thread-5][INFO ](HikariDataSource.java: close(): 350) : HikariPool-1 - Shutdown initiated...
[2023-09-06 09:17:03][Thread-5][INFO ](HikariDataSource.java: close(): 352) : HikariPool-1 - Shutdown completed.
[2023-09-06 09:17:03][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:17:03][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:17:04][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:17:04][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:17:04][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:17:04][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:17:04][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 571 ms
[2023-09-06 09:17:04][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:17:05][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:17:05][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:17:05][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.373 seconds (process running for 18.672)
[2023-09-06 09:17:05][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:17:24][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:17:24][Thread-9][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:17:24][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:17:24][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:17:24][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:17:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:17:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:17:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:17:24][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 359 ms
[2023-09-06 09:17:24][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:17:24][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:17:24][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:17:25][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.809 seconds (process running for 38.516)
[2023-09-06 09:17:25][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:17:32][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-2 - Starting...
[2023-09-06 09:17:32][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-2 - Added connection oracle.jdbc.driver.T4CConnection@11b9820
[2023-09-06 09:17:32][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-2 - Start completed.
[2023-09-06 09:17:32][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:17:32][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:17:32][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:17:32][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:17:32][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:17:34][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:17:34][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:17:34][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:17:34][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:17:34][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:17:34][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:17:34][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 54
[2023-09-06 09:17:41][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:17:41][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:17:41][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:17:41][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:17:41][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:17:41][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:17:41][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:17:41][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:17:41][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:17:41][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:17:54][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:17:54][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:17:54][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:17:54][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:17:54][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:17:54][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:17:54][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 54
[2023-09-06 09:18:08][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:18:08][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:18:08][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:18:08][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman2
[2023-09-06 09:18:08][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:18:08][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:18:08][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman2(String)
[2023-09-06 09:18:08][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:18:08][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06 09:14:05
[2023-09-06 09:18:08][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:18:10][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:18:10][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:18:10][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:18:10][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:18:10][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:18:10][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:18:10][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String)
[2023-09-06 09:18:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:18:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06 09:05:05
[2023-09-06 09:18:10][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:18:11][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:18:11][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:18:11][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:18:11][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:18:11][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:18:11][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:18:11][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman3(String)
[2023-09-06 09:18:11][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](AbstractPlatformTransactionManager.java: getTransaction(): 370) : Creating new transaction with name [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](DataSourceTransactionManager.java: doBegin(): 271) : Acquired Connection [HikariProxyConnection@1876940072 wrapping oracle.jdbc.driver.T4CConnection@11b9820] for JDBC transaction
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](DataSourceTransactionManager.java: doBegin(): 289) : Switching JDBC Connection [HikariProxyConnection@1876940072 wrapping oracle.jdbc.driver.T4CConnection@11b9820] to manual commit
[2023-09-06 09:18:28][http-nio-80-exec-5][TRACE](TransactionAspectSupport.java: prepareTransactionInfo(): 629) : Getting transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:18:28][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.register(..)비즈니스 메소드 실행
[2023-09-06 09:18:28][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman3, passwd=1111, name=졸라맨3, email=jolaman3@gmail.com, regdate=null)
[2023-09-06 09:18:28][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.create(..)비즈니스 메소드 실행
[2023-09-06 09:18:28][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman3, passwd=1111, name=졸라맨3, email=jolaman3@gmail.com, regdate=null)
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: INSERT INTO member(id, passwd, name, email) VALUES(?, ?, ?, ?)
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman3(String), 1111(String), 졸라맨3(String), jolaman3@gmail.com(String)
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==    Updates: 1
[2023-09-06 09:18:28][http-nio-80-exec-5][TRACE](TransactionAspectSupport.java: commitTransactionAfterReturning(): 658) : Completing transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](AbstractPlatformTransactionManager.java: processCommit(): 740) : Initiating transaction commit
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](DataSourceTransactionManager.java: doCommit(): 334) : Committing JDBC transaction on Connection [HikariProxyConnection@1876940072 wrapping oracle.jdbc.driver.T4CConnection@11b9820]
[2023-09-06 09:18:28][http-nio-80-exec-5][DEBUG](DataSourceTransactionManager.java: doCleanupAfterCompletion(): 393) : Releasing JDBC Connection [HikariProxyConnection@1876940072 wrapping oracle.jdbc.driver.T4CConnection@11b9820] after transaction
[2023-09-06 09:18:28][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:18:28][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:18:28][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:18:28][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:18:28][http-nio-80-exec-4][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:18:28][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:18:28][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman3(String)
[2023-09-06 09:18:28][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:18:28][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06 09:18:28
[2023-09-06 09:18:28][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:18:34][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:18:34][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:18:34][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:18:34][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:18:34][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:18:34][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:18:34][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 55
[2023-09-06 09:18:38][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:18:38][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:18:38][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy89#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:18:38][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:18:38][http-nio-80-exec-10][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:18:38][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:18:38][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:18:38][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:18:38][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:18:38][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:19:20][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:19:20][Thread-13][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:19:20][Thread-13][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:19:20][Thread-13][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-2 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:19:20][Thread-13][INFO ](HikariDataSource.java: close(): 350) : HikariPool-2 - Shutdown initiated...
[2023-09-06 09:19:20][Thread-13][INFO ](HikariDataSource.java: close(): 352) : HikariPool-2 - Shutdown completed.
[2023-09-06 09:19:20][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:19:20][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:19:20][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:19:20][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:19:20][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:19:20][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:19:20][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 288 ms
[2023-09-06 09:19:21][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:19:21][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:19:21][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:19:21][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.771 seconds (process running for 154.877)
[2023-09-06 09:19:21][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:19:28][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:19:28][Thread-27][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:19:28][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:19:28][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:19:29][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:19:29][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:19:29][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:19:29][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:19:29][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 694 ms
[2023-09-06 09:19:29][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:19:29][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:19:29][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:19:29][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.242 seconds (process running for 163.064)
[2023-09-06 09:19:29][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 0 ms
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy8.$Proxy96#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:19:31][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-3 - Starting...
[2023-09-06 09:19:31][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-3 - Added connection oracle.jdbc.driver.T4CConnection@75f23d59
[2023-09-06 09:19:31][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-3 - Start completed.
[2023-09-06 09:19:31][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:19:31][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:19:31][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:19:31][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:19:31][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:19:33][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:19:33][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:19:33][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy8.$Proxy96#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:19:33][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:19:33][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:19:33][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:19:33][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:19:33][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:19:33][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:19:33][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:20:01][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:20:01][Thread-31][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:20:01][Thread-31][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:20:01][Thread-31][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [OJDBC-WORKER-THREAD-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:401)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1061)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:20:01][Thread-31][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-3 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:20:01][Thread-31][INFO ](HikariDataSource.java: close(): 350) : HikariPool-3 - Shutdown initiated...
[2023-09-06 09:20:01][Thread-31][INFO ](HikariDataSource.java: close(): 352) : HikariPool-3 - Shutdown completed.
[2023-09-06 09:20:01][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:20:01][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:20:02][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:20:02][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:20:02][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:20:02][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:20:02][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 332 ms
[2023-09-06 09:20:02][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:20:02][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:20:02][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:20:02][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.738 seconds (process running for 196.062)
[2023-09-06 09:20:02][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:20:06][http-nio-80-exec-2][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:20:06][http-nio-80-exec-2][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:20:06][http-nio-80-exec-2][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:20:06][http-nio-80-exec-2][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/edit/bangry
[2023-09-06 09:20:06][http-nio-80-exec-2][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:20:10][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:20:10][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:20:10][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:20:10][http-nio-80-exec-9][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-4 - Starting...
[2023-09-06 09:20:10][http-nio-80-exec-9][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:20:10][http-nio-80-exec-9][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-4 - Added connection oracle.jdbc.driver.T4CConnection@9fcf2b4
[2023-09-06 09:20:10][http-nio-80-exec-9][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-4 - Start completed.
[2023-09-06 09:20:10][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:20:10][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:20:10][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:20:10][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 55
[2023-09-06 09:20:31][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:20:31][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolama
[2023-09-06 09:20:31][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:20:31][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolama
[2023-09-06 09:20:31][http-nio-80-exec-4][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:20:31][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:20:31][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolama(String)
[2023-09-06 09:20:31][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:20:31][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:20:31][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:20:31][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:20:31][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 09:20:31][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:20:31][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:20:31][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String)
[2023-09-06 09:20:31][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:20:31][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06 09:05:05
[2023-09-06 09:20:31][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:20:32][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:20:32][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman4
[2023-09-06 09:20:32][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:20:32][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman4
[2023-09-06 09:20:32][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:20:32][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:20:32][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman4(String)
[2023-09-06 09:20:32][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](AbstractPlatformTransactionManager.java: getTransaction(): 370) : Creating new transaction with name [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doBegin(): 271) : Acquired Connection [HikariProxyConnection@1163485980 wrapping oracle.jdbc.driver.T4CConnection@9fcf2b4] for JDBC transaction
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doBegin(): 289) : Switching JDBC Connection [HikariProxyConnection@1163485980 wrapping oracle.jdbc.driver.T4CConnection@9fcf2b4] to manual commit
[2023-09-06 09:20:49][http-nio-80-exec-8][TRACE](TransactionAspectSupport.java: prepareTransactionInfo(): 629) : Getting transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:20:49][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.register(..)비즈니스 메소드 실행
[2023-09-06 09:20:49][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman4, passwd=1111, name=졸라맨4, email=jolaman4@gmail.com, regdate=null)
[2023-09-06 09:20:49][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.create(..)비즈니스 메소드 실행
[2023-09-06 09:20:49][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=jolaman4, passwd=1111, name=졸라맨4, email=jolaman4@gmail.com, regdate=null)
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: INSERT INTO member(id, passwd, name, email) VALUES(?, ?, ?, ?)
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman4(String), 1111(String), 졸라맨4(String), jolaman4@gmail.com(String)
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==    Updates: 1
[2023-09-06 09:20:49][http-nio-80-exec-8][TRACE](TransactionAspectSupport.java: commitTransactionAfterReturning(): 658) : Completing transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](AbstractPlatformTransactionManager.java: processCommit(): 740) : Initiating transaction commit
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doCommit(): 334) : Committing JDBC transaction on Connection [HikariProxyConnection@1163485980 wrapping oracle.jdbc.driver.T4CConnection@9fcf2b4]
[2023-09-06 09:20:49][http-nio-80-exec-8][DEBUG](DataSourceTransactionManager.java: doCleanupAfterCompletion(): 393) : Releasing JDBC Connection [HikariProxyConnection@1163485980 wrapping oracle.jdbc.driver.T4CConnection@9fcf2b4] after transaction
[2023-09-06 09:20:49][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:20:49][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman4
[2023-09-06 09:20:49][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:20:49][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman4
[2023-09-06 09:20:49][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:20:49][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:20:49][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman4(String)
[2023-09-06 09:20:49][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:20:49][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06 09:20:49
[2023-09-06 09:20:49][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:20:58][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:20:58][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:20:58][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:20:58][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:20:58][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:20:58][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:20:58][http-nio-80-exec-2][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:20:58][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:20:58][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:20:58][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:20:58][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:20:58][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:20:58][http-nio-80-exec-9][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/edit/bangry
[2023-09-06 09:20:58][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:20:58][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:20:58][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:20:58][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:20:58][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:20:58][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:20:58][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:20:58][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:20:58][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:20:58][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:20:58][http-nio-80-exec-7][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/edit/vendor/jquery/jquery.min.js
[2023-09-06 09:20:58][http-nio-80-exec-5][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/edit/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:21:07][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:21:07][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:21:07][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:21:07][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:21:07][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:21:07][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:21:07][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:21:10][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:21:10][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:21:10][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:21:10][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:21:10][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:21:10][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:21:10][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:21:16][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:21:16][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:21:16][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:21:16][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:21:16][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:21:16][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:21:16][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:21:16][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:21:16][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:21:16][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:21:16][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:21:16][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:21:30][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:21:30][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:21:30][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:21:30][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:21:30][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:21:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:21:30][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:21:38][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:21:38][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:21:38][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:21:38][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:21:38][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:21:38][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:21:38][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:21:39][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:21:39][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:21:39][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:21:39][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:21:39][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:21:39][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:21:39][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:21:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:21:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:21:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:21:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy9.$Proxy98#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:21:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:21:46][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:21:46][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:21:46][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:21:46][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:21:46][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:21:46][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:21:46][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:23:23][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:23:23][Thread-37][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:23:23][Thread-37][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:23:23][Thread-37][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-4 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:23:23][Thread-37][INFO ](HikariDataSource.java: close(): 350) : HikariPool-4 - Shutdown initiated...
[2023-09-06 09:23:23][Thread-37][INFO ](HikariDataSource.java: close(): 352) : HikariPool-4 - Shutdown completed.
[2023-09-06 09:23:23][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:23:23][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:23:24][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:23:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:23:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:23:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:23:24][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 313 ms
[2023-09-06 09:23:24][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:23:24][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:23:24][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:23:24][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.748 seconds (process running for 398.145)
[2023-09-06 09:23:24][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy102#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:23:30][http-nio-80-exec-2][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-5 - Starting...
[2023-09-06 09:23:30][http-nio-80-exec-2][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-5 - Added connection oracle.jdbc.driver.T4CConnection@297f0323
[2023-09-06 09:23:30][http-nio-80-exec-2][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-5 - Start completed.
[2023-09-06 09:23:30][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:23:30][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:23:30][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:23:30][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:23:38][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:23:38][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:23:38][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:23:38][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy102#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:23:38][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:23:38][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:23:38][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:23:38][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:23:38][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:23:38][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:23:38][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:23:38][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:23:38][http-nio-80-exec-6][WARN ](MemberController.java: login(): 149) : null
[2023-09-06 09:26:55][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:26:55][Thread-53][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:26:55][Thread-53][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:26:55][Thread-53][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-5 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:26:55][Thread-53][INFO ](HikariDataSource.java: close(): 350) : HikariPool-5 - Shutdown initiated...
[2023-09-06 09:26:55][Thread-53][INFO ](HikariDataSource.java: close(): 352) : HikariPool-5 - Shutdown completed.
[2023-09-06 09:26:55][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 9300 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:26:55][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:26:56][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:26:56][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:26:56][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:26:56][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:26:56][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 704 ms
[2023-09-06 09:26:56][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:26:57][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:26:57][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:26:57][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.168 seconds (process running for 610.57)
[2023-09-06 09:26:57][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:27:15][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:27:15][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:27:15][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 0 ms
[2023-09-06 09:27:19][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:27:19][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy11.$Proxy104#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:27:19][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:27:19][http-nio-80-exec-6][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-6 - Starting...
[2023-09-06 09:27:19][http-nio-80-exec-6][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:27:19][http-nio-80-exec-6][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-6 - Added connection oracle.jdbc.driver.T4CConnection@22ea2abd
[2023-09-06 09:27:19][http-nio-80-exec-6][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-6 - Start completed.
[2023-09-06 09:27:19][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:27:19][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:27:19][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:27:19][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:27:27][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:27:27][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:27:27][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:27:27][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy11.$Proxy104#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:27:27][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:27:27][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:27:27][http-nio-80-exec-4][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:27:27][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:27:27][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:27:27][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:27:27][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:27:27][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:27:27][http-nio-80-exec-4][WARN ](MemberController.java: login(): 149) : null
[2023-09-06 09:32:30][RMI TCP Connection(39)-127.0.0.1][INFO ](SpringApplicationAdminMXBeanRegistrar.java: shutdown(): 159) : Application shutdown requested.
[2023-09-06 09:32:30][RMI TCP Connection(39)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:32:30][RMI TCP Connection(39)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:32:30][RMI TCP Connection(39)-127.0.0.1][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-6 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:32:30][RMI TCP Connection(39)-127.0.0.1][INFO ](HikariDataSource.java: close(): 350) : HikariPool-6 - Shutdown initiated...
[2023-09-06 09:32:30][RMI TCP Connection(39)-127.0.0.1][INFO ](HikariDataSource.java: close(): 352) : HikariPool-6 - Shutdown completed.
[2023-09-06 09:32:33][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 10700 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:32:33][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:32:33][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : The Class-Path manifest attribute in C:\Users\i7C-\.gradle\caches\modules-2\files-2.1\com.oracle.database.jdbc\ojdbc8\21.9.0.0\a68f29ad2376bdb8c04a87cda70c62907995855d\ojdbc8-21.9.0.0.jar referenced one or more files that do not exist: file:/C:/Users/i7C-/.gradle/caches/modules-2/files-2.1/com.oracle.database.jdbc/ojdbc8/21.9.0.0/a68f29ad2376bdb8c04a87cda70c62907995855d/oraclepki.jar
[2023-09-06 09:32:33][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[2023-09-06 09:32:33][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[2023-09-06 09:32:34][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:32:34][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:32:34][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:32:34][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:32:34][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 1477 ms
[2023-09-06 09:32:35][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:32:35][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:32:36][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:32:36][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 3.036 seconds (process running for 5.223)
[2023-09-06 09:32:37][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:32:37][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:32:37][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:33:29][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:33:29][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:33:29][http-nio-80-exec-10][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:33:29][http-nio-80-exec-10][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-1 - Starting...
[2023-09-06 09:33:29][http-nio-80-exec-10][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:33:29][http-nio-80-exec-10][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-1 - Added connection oracle.jdbc.driver.T4CConnection@23059782
[2023-09-06 09:33:29][http-nio-80-exec-10][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-1 - Start completed.
[2023-09-06 09:33:29][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:33:29][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:33:29][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:33:29][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:34:01][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:34:01][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:34:01][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:34:01][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [oracle.jdbc.driver.BlockSource.ThreadedCachingBlockSource.BlockReleaser] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:258)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:240)
 app//oracle.jdbc.driver.BlockSource$ThreadedCachingBlockSource$BlockReleaser.run(BlockSource.java:345)
[2023-09-06 09:34:01][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [InterruptTimer] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Object.wait(Native Method)
 java.base@17.0.8/java.util.TimerThread.mainLoop(Timer.java:563)
 java.base@17.0.8/java.util.TimerThread.run(Timer.java:516)
[2023-09-06 09:34:01][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [OJDBC-WORKER-THREAD-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:401)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1061)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:34:01][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:34:01][Thread-5][INFO ](HikariDataSource.java: close(): 350) : HikariPool-1 - Shutdown initiated...
[2023-09-06 09:34:01][Thread-5][INFO ](HikariDataSource.java: close(): 352) : HikariPool-1 - Shutdown completed.
[2023-09-06 09:34:01][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 10700 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:34:01][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:34:01][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:34:01][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:34:01][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:34:01][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:34:01][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 735 ms
[2023-09-06 09:34:02][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:34:02][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:34:02][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:34:02][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.216 seconds (process running for 91.562)
[2023-09-06 09:34:02][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:34:03][RMI TCP Connection(13)-127.0.0.1][INFO ](SpringApplicationAdminMXBeanRegistrar.java: shutdown(): 159) : Application shutdown requested.
[2023-09-06 09:34:03][RMI TCP Connection(13)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:34:05][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:34:05][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:34:05][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : The Class-Path manifest attribute in C:\Users\i7C-\.gradle\caches\modules-2\files-2.1\com.oracle.database.jdbc\ojdbc8\21.9.0.0\a68f29ad2376bdb8c04a87cda70c62907995855d\ojdbc8-21.9.0.0.jar referenced one or more files that do not exist: file:/C:/Users/i7C-/.gradle/caches/modules-2/files-2.1/com.oracle.database.jdbc/ojdbc8/21.9.0.0/a68f29ad2376bdb8c04a87cda70c62907995855d/oraclepki.jar
[2023-09-06 09:34:05][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[2023-09-06 09:34:05][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[2023-09-06 09:34:06][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:34:06][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:34:06][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:34:06][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:34:06][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 1354 ms
[2023-09-06 09:34:07][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:34:07][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:34:07][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:34:07][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 2.81 seconds (process running for 3.537)
[2023-09-06 09:34:16][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:34:16][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:34:16][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:34:16][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:34:16][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:34:16][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:34:16][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-1 - Starting...
[2023-09-06 09:34:16][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:34:17][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-1 - Added connection oracle.jdbc.driver.T4CConnection@172334c9
[2023-09-06 09:34:17][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-1 - Start completed.
[2023-09-06 09:34:17][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:34:17][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:34:17][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:34:17][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:34:32][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:34:32][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:34:32][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:34:32][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:34:32][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:34:32][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:34:32][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:34:42][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:34:42][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:34:42][http-nio-80-exec-4][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:34:42][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:34:42][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:34:42][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:34:42][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:35:59][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:35:59][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:35:59][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:35:59][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [oracle.jdbc.driver.BlockSource.ThreadedCachingBlockSource.BlockReleaser] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:258)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:240)
 app//oracle.jdbc.driver.BlockSource$ThreadedCachingBlockSource$BlockReleaser.run(BlockSource.java:345)
[2023-09-06 09:35:59][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [InterruptTimer] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Object.wait(Native Method)
 java.base@17.0.8/java.util.TimerThread.mainLoop(Timer.java:563)
 java.base@17.0.8/java.util.TimerThread.run(Timer.java:516)
[2023-09-06 09:35:59][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:35:59][Thread-5][INFO ](HikariDataSource.java: close(): 350) : HikariPool-1 - Shutdown initiated...
[2023-09-06 09:35:59][Thread-5][INFO ](HikariDataSource.java: close(): 352) : HikariPool-1 - Shutdown completed.
[2023-09-06 09:35:59][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:35:59][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:36:00][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:36:00][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:36:00][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:36:00][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:36:00][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 375 ms
[2023-09-06 09:36:00][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:36:00][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:36:00][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:36:00][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.027 seconds (process running for 116.734)
[2023-09-06 09:36:00][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:36:41][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:36:41][Thread-11][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:36:41][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:36:41][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:36:42][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:36:42][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:36:42][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:36:42][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:36:42][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 703 ms
[2023-09-06 09:36:42][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:36:42][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:36:42][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:36:42][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.155 seconds (process running for 158.62)
[2023-09-06 09:36:42][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:37:13][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:37:13][Thread-15][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:37:13][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:37:13][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:37:13][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:37:13][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:37:13][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:37:13][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:37:13][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 314 ms
[2023-09-06 09:37:14][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:37:14][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:37:14][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:37:14][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.276 seconds (process running for 190.468)
[2023-09-06 09:37:14][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:37:19][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:37:19][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:37:19][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 0 ms
[2023-09-06 09:37:22][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member
[2023-09-06 09:37:22][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:37:22][http-nio-80-exec-7][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/jquery/jquery.min.js
[2023-09-06 09:37:22][http-nio-80-exec-7][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:37:22][http-nio-80-exec-5][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:37:22][http-nio-80-exec-5][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:37:40][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:37:40][Thread-19][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:37:40][Thread-19][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:37:41][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:37:41][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:37:41][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:37:41][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:37:41][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:37:41][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:37:41][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 335 ms
[2023-09-06 09:37:41][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:37:41][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:37:41][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:37:41][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.728 seconds (process running for 217.672)
[2023-09-06 09:37:41][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy8.$Proxy92#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:37:45][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-2 - Starting...
[2023-09-06 09:37:45][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-2 - Added connection oracle.jdbc.driver.T4CConnection@541e3e6a
[2023-09-06 09:37:45][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-2 - Start completed.
[2023-09-06 09:37:45][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:37:45][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:37:45][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:37:46][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:37:46][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:37:48][http-nio-80-exec-4][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/jquery/jquery.min.js
[2023-09-06 09:37:48][http-nio-80-exec-2][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:37:48][http-nio-80-exec-4][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:37:48][http-nio-80-exec-2][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:37:54][http-nio-80-exec-1][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/jquery/jquery.min.js
[2023-09-06 09:37:54][http-nio-80-exec-4][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:37:54][http-nio-80-exec-1][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:37:54][http-nio-80-exec-4][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:38:24][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:38:24][Thread-23][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:38:24][Thread-23][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:38:24][Thread-23][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [OJDBC-WORKER-THREAD-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:401)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1061)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:38:24][Thread-23][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-2 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:38:24][Thread-23][INFO ](HikariDataSource.java: close(): 350) : HikariPool-2 - Shutdown initiated...
[2023-09-06 09:38:24][Thread-23][INFO ](HikariDataSource.java: close(): 352) : HikariPool-2 - Shutdown completed.
[2023-09-06 09:38:24][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:38:24][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:38:24][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:38:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:38:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:38:24][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:38:24][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 298 ms
[2023-09-06 09:38:24][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:38:25][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:38:25][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:38:25][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.905 seconds (process running for 261.187)
[2023-09-06 09:38:25][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:38:32][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:38:32][Thread-28][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:38:32][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:38:32][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:38:32][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:38:32][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:38:32][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:38:32][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:38:32][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 282 ms
[2023-09-06 09:38:32][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:38:33][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:38:33][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:38:33][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.672 seconds (process running for 268.95)
[2023-09-06 09:38:33][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:38:37][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:38:37][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:38:37][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:38:39][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:38:39][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy96#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:38:39][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:38:39][http-nio-80-exec-8][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-3 - Starting...
[2023-09-06 09:38:39][http-nio-80-exec-8][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:38:39][http-nio-80-exec-8][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-3 - Added connection oracle.jdbc.driver.T4CConnection@569cc0d
[2023-09-06 09:38:39][http-nio-80-exec-8][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-3 - Start completed.
[2023-09-06 09:38:39][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:38:39][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:38:39][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:38:39][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:38:47][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:38:47][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy96#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:38:47][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:38:47][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:38:47][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:38:47][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:38:47][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:38:53][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:38:53][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:38:53][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:38:53][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy96#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:38:53][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:38:53][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:38:53][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:38:53][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:38:53][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:38:53][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:38:53][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:38:53][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:38:53][http-nio-80-exec-8][WARN ](MemberController.java: login(): 149) : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:41:05][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:41:05][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy96#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:41:05][http-nio-80-exec-4][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:41:05][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:41:05][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:41:05][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:41:05][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:41:12][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:41:12][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy96#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:41:12][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:41:12][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:41:12][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:41:12][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:41:12][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:41:20][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:41:20][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:41:20][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:41:20][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy10.$Proxy96#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:41:20][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:41:20][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:41:20][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:41:20][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:41:20][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:41:20][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:41:20][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:41:20][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:41:20][http-nio-80-exec-9][WARN ](MemberController.java: login(): 149) : null
[2023-09-06 09:42:24][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:42:24][Thread-32][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:42:24][Thread-32][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:42:24][Thread-32][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-3 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:42:24][Thread-32][INFO ](HikariDataSource.java: close(): 350) : HikariPool-3 - Shutdown initiated...
[2023-09-06 09:42:24][Thread-32][INFO ](HikariDataSource.java: close(): 352) : HikariPool-3 - Shutdown completed.
[2023-09-06 09:42:24][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 7788 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:42:24][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:42:25][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:42:25][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:42:25][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:42:25][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:42:25][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 294 ms
[2023-09-06 09:42:25][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:42:25][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:42:25][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:42:25][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.786 seconds (process running for 501.472)
[2023-09-06 09:42:25][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:42:28][RMI TCP Connection(34)-127.0.0.1][INFO ](SpringApplicationAdminMXBeanRegistrar.java: shutdown(): 159) : Application shutdown requested.
[2023-09-06 09:42:28][RMI TCP Connection(34)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:42:30][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:42:30][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:42:30][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : The Class-Path manifest attribute in C:\Users\i7C-\.gradle\caches\modules-2\files-2.1\com.oracle.database.jdbc\ojdbc8\21.9.0.0\a68f29ad2376bdb8c04a87cda70c62907995855d\ojdbc8-21.9.0.0.jar referenced one or more files that do not exist: file:/C:/Users/i7C-/.gradle/caches/modules-2/files-2.1/com.oracle.database.jdbc/ojdbc8/21.9.0.0/a68f29ad2376bdb8c04a87cda70c62907995855d/oraclepki.jar
[2023-09-06 09:42:30][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[2023-09-06 09:42:30][restartedMain][INFO ](DeferredLog.java: logTo(): 250) : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[2023-09-06 09:42:31][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:42:31][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:42:31][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:42:31][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:42:31][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 1334 ms
[2023-09-06 09:42:32][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:42:32][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:42:32][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:42:32][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 2.804 seconds (process running for 3.625)
[2023-09-06 09:42:40][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:42:40][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:42:40][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:42:40][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:42:40][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:42:40][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:42:40][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-1 - Starting...
[2023-09-06 09:42:40][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:42:41][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-1 - Added connection oracle.jdbc.driver.T4CConnection@4d1b3917
[2023-09-06 09:42:41][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-1 - Start completed.
[2023-09-06 09:42:41][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:42:41][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:42:41][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:42:41][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:43:49][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:43:49][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:43:49][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:43:49][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy3.$Proxy71#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:43:49][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:43:49][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:43:49][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:43:49][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:43:49][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:43:49][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:43:49][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:43:49][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:43:49][http-nio-80-exec-3][WARN ](MemberController.java: login(): 149) : null
[2023-09-06 09:44:48][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:44:48][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:44:48][Thread-5][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:44:48][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [oracle.jdbc.driver.BlockSource.ThreadedCachingBlockSource.BlockReleaser] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:258)
 app//oracle.jdbc.internal.Monitor$WaitableMonitor.monitorWait(Monitor.java:240)
 app//oracle.jdbc.driver.BlockSource$ThreadedCachingBlockSource$BlockReleaser.run(BlockSource.java:345)
[2023-09-06 09:44:48][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [InterruptTimer] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Object.wait(Native Method)
 java.base@17.0.8/java.util.TimerThread.mainLoop(Timer.java:563)
 java.base@17.0.8/java.util.TimerThread.run(Timer.java:516)
[2023-09-06 09:44:48][Thread-5][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:44:48][Thread-5][INFO ](HikariDataSource.java: close(): 350) : HikariPool-1 - Shutdown initiated...
[2023-09-06 09:44:48][Thread-5][INFO ](HikariDataSource.java: close(): 352) : HikariPool-1 - Shutdown completed.
[2023-09-06 09:44:48][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:44:48][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:44:49][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:44:49][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:44:49][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:44:49][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:44:49][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 824 ms
[2023-09-06 09:44:49][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:44:50][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:44:50][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:44:50][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.442 seconds (process running for 141.245)
[2023-09-06 09:44:50][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 0 ms
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy5.$Proxy90#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:44:51][http-nio-80-exec-1][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-2 - Starting...
[2023-09-06 09:44:51][http-nio-80-exec-1][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-2 - Added connection oracle.jdbc.driver.T4CConnection@4532ff63
[2023-09-06 09:44:51][http-nio-80-exec-1][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-2 - Start completed.
[2023-09-06 09:44:51][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:44:51][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:44:51][http-nio-80-exec-1][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:44:51][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:44:53][http-nio-80-exec-1][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/jquery/jquery.min.js
[2023-09-06 09:44:53][http-nio-80-exec-1][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:44:53][http-nio-80-exec-9][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:44:53][http-nio-80-exec-9][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:44:56][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:44:56][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:44:56][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:44:56][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy5.$Proxy90#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:44:56][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:44:56][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:44:56][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:44:56][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:44:56][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:44:56][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:44:56][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:44:56][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:44:56][http-nio-80-exec-5][WARN ](MemberController.java: login(): 149) : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:44:56][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:46:34][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:46:34][Thread-10][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:46:34][Thread-10][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:46:34][Thread-10][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-2 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:46:34][Thread-10][INFO ](HikariDataSource.java: close(): 350) : HikariPool-2 - Shutdown initiated...
[2023-09-06 09:46:34][Thread-10][INFO ](HikariDataSource.java: close(): 352) : HikariPool-2 - Shutdown completed.
[2023-09-06 09:46:34][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:46:34][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:46:34][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:46:34][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:46:34][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:46:34][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:46:34][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 362 ms
[2023-09-06 09:46:35][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:46:35][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:46:35][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:46:35][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.801 seconds (process running for 246.373)
[2023-09-06 09:46:35][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:46:49][http-nio-80-exec-2][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:46:49][http-nio-80-exec-2][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:46:49][http-nio-80-exec-2][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:46:50][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:46:50][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy92#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:46:50][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:46:50][http-nio-80-exec-8][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-3 - Starting...
[2023-09-06 09:46:50][http-nio-80-exec-8][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:46:50][http-nio-80-exec-8][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-3 - Added connection oracle.jdbc.driver.T4CConnection@3891b1a6
[2023-09-06 09:46:50][http-nio-80-exec-8][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-3 - Start completed.
[2023-09-06 09:46:50][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:46:50][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:46:50][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:46:50][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:46:55][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:46:55][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:46:55][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:46:55][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy6.$Proxy92#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:46:55][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:46:55][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:46:55][http-nio-80-exec-10][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:46:55][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:46:55][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:46:55][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:46:55][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:46:55][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:46:55][http-nio-80-exec-10][WARN ](MemberController.java: login(): 149) : /member/vendor/bootstrap/js/bootstrap.bundle.min.js
[2023-09-06 09:47:19][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:47:19][Thread-16][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:47:19][Thread-16][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:47:19][Thread-16][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [OJDBC-WORKER-THREAD-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:401)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1061)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:47:19][Thread-16][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-3 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:47:19][Thread-16][INFO ](HikariDataSource.java: close(): 350) : HikariPool-3 - Shutdown initiated...
[2023-09-06 09:47:19][Thread-16][INFO ](HikariDataSource.java: close(): 352) : HikariPool-3 - Shutdown completed.
[2023-09-06 09:47:20][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:47:20][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:47:20][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:47:20][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:47:20][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:47:20][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:47:20][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 871 ms
[2023-09-06 09:47:21][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:47:21][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:47:21][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:47:21][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.467 seconds (process running for 292.638)
[2023-09-06 09:47:21][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:47:39][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:47:39][Thread-22][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:47:39][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:47:39][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:47:39][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:47:39][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:47:39][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:47:39][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:47:39][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 277 ms
[2023-09-06 09:47:40][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:47:40][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:47:40][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:47:40][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.84 seconds (process running for 311.591)
[2023-09-06 09:47:40][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:47:45][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:47:45][Thread-26][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:47:45][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:47:45][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:47:45][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:47:45][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:47:45][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:47:45][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:47:45][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 284 ms
[2023-09-06 09:47:45][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:47:46][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:47:46][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:47:46][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 0.726 seconds (process running for 317.324)
[2023-09-06 09:47:46][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:47:51][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:47:51][Thread-30][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:47:51][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:47:51][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:47:52][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:47:52][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:47:52][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:47:52][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:47:52][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 653 ms
[2023-09-06 09:47:52][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:47:52][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:47:52][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:47:52][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.062 seconds (process running for 324.058)
[2023-09-06 09:47:52][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:47:57][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:47:57][Thread-34][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:47:57][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:47:57][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:47:58][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:47:58][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:47:58][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:47:58][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:47:58][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 624 ms
[2023-09-06 09:47:58][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:47:58][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:47:58][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:47:58][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.052 seconds (process running for 329.916)
[2023-09-06 09:47:58][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:48:02][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:48:02][Thread-38][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:48:02][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:48:02][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:48:02][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:48:02][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:48:02][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:48:02][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:48:02][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 542 ms
[2023-09-06 09:48:03][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:48:03][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:48:03][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:48:03][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.268 seconds (process running for 334.716)
[2023-09-06 09:48:03][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:48:11][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:48:11][Thread-42][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:48:11][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:48:11][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:48:12][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:48:12][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:48:12][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:48:12][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:48:12][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 759 ms
[2023-09-06 09:48:12][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:48:12][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:48:12][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:48:12][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.214 seconds (process running for 343.678)
[2023-09-06 09:48:12][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:48:15][http-nio-80-exec-1][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:48:15][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:48:15][http-nio-80-exec-1][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 1 ms
[2023-09-06 09:48:17][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:48:17][http-nio-80-exec-8][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy13.$Proxy106#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:48:17][http-nio-80-exec-8][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:48:17][http-nio-80-exec-8][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-4 - Starting...
[2023-09-06 09:48:17][http-nio-80-exec-8][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:48:17][http-nio-80-exec-8][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-4 - Added connection oracle.jdbc.driver.T4CConnection@75898c42
[2023-09-06 09:48:17][http-nio-80-exec-8][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-4 - Start completed.
[2023-09-06 09:48:17][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:48:17][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:48:17][http-nio-80-exec-8][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:48:17][http-nio-80-exec-8][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:48:22][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:48:22][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy13.$Proxy106#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:48:22][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:48:22][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:48:22][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:48:22][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:48:22][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:48:25][http-nio-80-exec-10][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman3
[2023-09-06 09:48:25][http-nio-80-exec-10][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:48:32][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:48:32][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:48:32][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:48:32][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy13.$Proxy106#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:48:32][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:48:32][http-nio-80-exec-3][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:48:32][http-nio-80-exec-3][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:48:32][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:48:32][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:48:32][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:48:32][http-nio-80-exec-3][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:48:32][http-nio-80-exec-3][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:48:32][http-nio-80-exec-3][WARN ](MemberController.java: login(): 149) : /member/jolaman3
[2023-09-06 09:48:32][http-nio-80-exec-6][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman3
[2023-09-06 09:48:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:48:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:48:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy13.$Proxy106#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:48:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:48:32][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:48:32][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:48:32][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman3(String)
[2023-09-06 09:48:32][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:48:32][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06 09:18:28
[2023-09-06 09:48:32][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:48:48][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:48:48][Thread-46][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:48:48][Thread-46][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 09:48:48][Thread-46][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [OJDBC-WORKER-THREAD-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:401)
 java.base@17.0.8/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1061)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:48:48][Thread-46][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-4 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 09:48:49][Thread-46][INFO ](HikariDataSource.java: close(): 350) : HikariPool-4 - Shutdown initiated...
[2023-09-06 09:48:49][Thread-46][INFO ](HikariDataSource.java: close(): 352) : HikariPool-4 - Shutdown completed.
[2023-09-06 09:48:49][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:48:49][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:48:49][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:48:49][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:48:49][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:48:49][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:48:49][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 462 ms
[2023-09-06 09:48:50][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:48:50][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:48:50][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:48:50][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.278 seconds (process running for 381.623)
[2023-09-06 09:48:50][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:48:52][File Watcher][INFO ](LocalDevToolsAutoConfiguration.java: onApplicationEvent(): 211) : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
[2023-09-06 09:48:53][Thread-53][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 09:48:53][restartedMain][INFO ](StartupInfoLogger.java: logStarting(): 51) : Starting SpringMvcApplication using Java 17.0.8 with PID 12436 (C:\ezen-fullstack\workspace\final_project_template\bin\main started by i7C- in C:\ezen-fullstack\workspace\final_project_template)
[2023-09-06 09:48:53][restartedMain][INFO ](SpringApplication.java: logStartupProfileInfo(): 634) : No active profile set, falling back to 1 default profile: "dev"
[2023-09-06 09:48:53][restartedMain][INFO ](TomcatWebServer.java: initialize(): 108) : Tomcat initialized with port(s): 80 (http)
[2023-09-06 09:48:53][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting service [Tomcat]
[2023-09-06 09:48:53][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Starting Servlet engine: [Apache Tomcat/10.1.11]
[2023-09-06 09:48:53][restartedMain][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring embedded WebApplicationContext
[2023-09-06 09:48:53][restartedMain][INFO ](ServletWebServerApplicationContext.java: prepareWebApplicationContext(): 291) : Root WebApplicationContext: initialization completed in 343 ms
[2023-09-06 09:48:53][restartedMain][INFO ](WelcomePageHandlerMapping.java: <init>(): 57) : Adding welcome page template: index
[2023-09-06 09:48:54][restartedMain][INFO ](OptionalLiveReloadServer.java: startServer(): 59) : LiveReload server is running on port 35729
[2023-09-06 09:48:54][restartedMain][INFO ](TomcatWebServer.java: start(): 220) : Tomcat started on port(s): 80 (http) with context path ''
[2023-09-06 09:48:54][restartedMain][INFO ](StartupInfoLogger.java: logStarted(): 57) : Started SpringMvcApplication in 1.278 seconds (process running for 385.631)
[2023-09-06 09:48:54][restartedMain][INFO ](ConditionEvaluationDeltaLoggingListener.java: onApplicationEvent(): 63) : Condition evaluation unchanged
[2023-09-06 09:49:05][http-nio-80-exec-8][INFO ](DirectJDKLog.java: log(): 173) : Initializing Spring DispatcherServlet 'dispatcherServlet'
[2023-09-06 09:49:05][http-nio-80-exec-8][INFO ](FrameworkServlet.java: initServletBean(): 532) : Initializing Servlet 'dispatcherServlet'
[2023-09-06 09:49:05][http-nio-80-exec-8][INFO ](FrameworkServlet.java: initServletBean(): 554) : Completed initialization in 0 ms
[2023-09-06 09:49:05][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/edit/jolaman3
[2023-09-06 09:49:05][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:49:30][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:49:30][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:49:30][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:49:30][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:49:30][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:49:30][http-nio-80-exec-9][INFO ](HikariDataSource.java: getConnection(): 110) : HikariPool-5 - Starting...
[2023-09-06 09:49:30][http-nio-80-exec-9][WARN ](DriverDataSource.java: <init>(): 70) : Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
[2023-09-06 09:49:30][http-nio-80-exec-9][INFO ](HikariPool.java: checkFailFast(): 565) : HikariPool-5 - Added connection oracle.jdbc.driver.T4CConnection@57d70dbc
[2023-09-06 09:49:30][http-nio-80-exec-9][INFO ](HikariDataSource.java: getConnection(): 123) : HikariPool-5 - Start completed.
[2023-09-06 09:49:30][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:49:30][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 09:49:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:49:30][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:49:30][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:49:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:49:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangrye
[2023-09-06 09:49:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:49:32][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangrye
[2023-09-06 09:49:32][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:49:32][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:49:32][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangrye(String)
[2023-09-06 09:49:32][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:49:46][http-nio-80-exec-7][WARN ](LocalVariableTableParameterNameDiscoverer.java: inspectClass(): 123) : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: com.ezen.springmvc.web.member.controller.MemberController
[2023-09-06 09:50:01][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 09:50:01][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 09:50:01][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:50:01][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 09:50:01][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 09:50:01][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 09:50:01][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 56
[2023-09-06 09:50:03][http-nio-80-exec-5][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman3
[2023-09-06 09:50:03][http-nio-80-exec-5][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:50:11][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 09:50:11][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:50:11][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:50:11][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 09:50:11][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 09:50:11][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 09:50:11][http-nio-80-exec-2][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:50:11][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 09:50:11][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 09:50:11][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:50:11][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 09:50:11][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:50:11][http-nio-80-exec-2][WARN ](MemberController.java: login(): 149) : /member/jolaman3
[2023-09-06 09:50:11][http-nio-80-exec-4][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman3
[2023-09-06 09:50:11][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:50:11][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:50:11][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:50:11][http-nio-80-exec-4][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman3
[2023-09-06 09:50:11][http-nio-80-exec-4][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:50:11][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:50:11][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman3(String)
[2023-09-06 09:50:11][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 09:50:11][http-nio-80-exec-4][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06 09:18:28
[2023-09-06 09:50:11][http-nio-80-exec-4][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 09:50:20][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 09:50:20][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / laster
[2023-09-06 09:50:20][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 09:50:20][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / laster
[2023-09-06 09:50:20][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 09:50:20][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 09:50:20][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: laster(String)
[2023-09-06 09:50:20][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 0
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](AbstractPlatformTransactionManager.java: getTransaction(): 370) : Creating new transaction with name [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](DataSourceTransactionManager.java: doBegin(): 271) : Acquired Connection [HikariProxyConnection@669202151 wrapping oracle.jdbc.driver.T4CConnection@57d70dbc] for JDBC transaction
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](DataSourceTransactionManager.java: doBegin(): 289) : Switching JDBC Connection [HikariProxyConnection@669202151 wrapping oracle.jdbc.driver.T4CConnection@57d70dbc] to manual commit
[2023-09-06 09:50:34][http-nio-80-exec-1][TRACE](TransactionAspectSupport.java: prepareTransactionInfo(): 629) : Getting transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:50:34][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.register(..)비즈니스 메소드 실행
[2023-09-06 09:50:34][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=laster, passwd=1111, name=라스터, email=laster@gmail.com, regdate=null)
[2023-09-06 09:50:34][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.create(..)비즈니스 메소드 실행
[2023-09-06 09:50:34][http-nio-80-exec-1][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : com.ezen.springmvc.domain.member.dto.Member / Member(id=laster, passwd=1111, name=라스터, email=laster@gmail.com, regdate=null)
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: INSERT INTO member(id, passwd, name, email) VALUES(?, ?, ?, ?)
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: laster(String), 1111(String), 라스터(String), laster@gmail.com(String)
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==    Updates: 1
[2023-09-06 09:50:34][http-nio-80-exec-1][TRACE](TransactionAspectSupport.java: commitTransactionAfterReturning(): 658) : Completing transaction for [com.ezen.springmvc.domain.member.service.MemberServiceImpl.register]
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](AbstractPlatformTransactionManager.java: processCommit(): 740) : Initiating transaction commit
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](DataSourceTransactionManager.java: doCommit(): 334) : Committing JDBC transaction on Connection [HikariProxyConnection@669202151 wrapping oracle.jdbc.driver.T4CConnection@57d70dbc]
[2023-09-06 09:50:34][http-nio-80-exec-1][DEBUG](DataSourceTransactionManager.java: doCleanupAfterCompletion(): 393) : Releasing JDBC Connection [HikariProxyConnection@669202151 wrapping oracle.jdbc.driver.T4CConnection@57d70dbc] after transaction
[2023-09-06 09:50:34][http-nio-80-exec-9][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/laster
[2023-09-06 09:50:34][http-nio-80-exec-9][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 09:52:27][http-nio-80-exec-2][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/bangry
[2023-09-06 09:52:27][http-nio-80-exec-2][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 10:01:23][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 10:01:23][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 10:01:23][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:23][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 10:01:23][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: laster, 라스터, laster@gmail.com, 2023-09-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 10:01:23][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 10:01:23][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 57
[2023-09-06 10:01:29][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 10:01:29][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:01:29][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 10:01:29][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 10:01:29][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:01:29][http-nio-80-exec-9][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 10:01:29][http-nio-80-exec-9][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:29][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 10:01:29][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 10:01:29][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:29][http-nio-80-exec-9][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 10:01:29][http-nio-80-exec-9][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 10:01:29][http-nio-80-exec-9][WARN ](MemberController.java: login(): 149) : /member/bangry
[2023-09-06 10:01:29][http-nio-80-exec-2][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/bangry
[2023-09-06 10:01:29][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 10:01:29][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:01:29][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 10:01:29][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:01:29][http-nio-80-exec-2][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:29][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 10:01:29][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String)
[2023-09-06 10:01:29][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:29][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 10:01:29][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 10:01:31][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 10:01:31][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 10:01:31][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:31][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 10:01:31][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: laster, 라스터, laster@gmail.com, 2023-09-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 10:01:31][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 10:01:31][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 57
[2023-09-06 10:01:34][http-nio-80-exec-10][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman
[2023-09-06 10:01:34][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 10:01:34][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 10:01:34][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 10:01:34][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 10:01:34][http-nio-80-exec-10][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:34][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 10:01:34][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String)
[2023-09-06 10:01:34][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:34][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06 09:05:05
[2023-09-06 10:01:34][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 10:01:38][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 10:01:38][http-nio-80-exec-2][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 10:01:38][http-nio-80-exec-2][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:38][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 10:01:38][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: laster, 라스터, laster@gmail.com, 2023-09-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 10:01:38][http-nio-80-exec-2][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 10:01:38][http-nio-80-exec-2][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 57
[2023-09-06 10:01:39][http-nio-80-exec-7][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman
[2023-09-06 10:01:39][http-nio-80-exec-7][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 10:01:45][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 10:01:45][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:01:45][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 10:01:45][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 10:01:45][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:01:45][http-nio-80-exec-6][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 10:01:45][http-nio-80-exec-6][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:45][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 10:01:45][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 10:01:45][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:45][http-nio-80-exec-6][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 10:01:45][http-nio-80-exec-6][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 10:01:45][http-nio-80-exec-6][WARN ](MemberController.java: login(): 149) : /member/jolaman
[2023-09-06 10:01:45][http-nio-80-exec-10][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /member/jolaman
[2023-09-06 10:01:45][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMember(..)비즈니스 메소드 실행
[2023-09-06 10:01:45][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 10:01:45][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findById(..)비즈니스 메소드 실행
[2023-09-06 10:01:45][http-nio-80-exec-10][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / jolaman
[2023-09-06 10:01:45][http-nio-80-exec-10][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:45][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ?
[2023-09-06 10:01:45][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: jolaman(String)
[2023-09-06 10:01:45][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:45][http-nio-80-exec-10][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06 09:05:05
[2023-09-06 10:01:45][http-nio-80-exec-10][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 10:01:47][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.getMemberList()비즈니스 메소드 실행
[2023-09-06 10:01:47][http-nio-80-exec-5][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByAll()비즈니스 메소드 실행
[2023-09-06 10:01:47][http-nio-80-exec-5][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:01:47][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD') regdate FROM member ORDER BY regdate DESC
[2023-09-06 10:01:47][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: 
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman, 졸라맨, jolaman@gmail.com, 2023-09-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman2, 졸라맨2, jolaman2@gmail.com, 2023-09-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman3, 졸라맨3, jolaman3@gmail.com, 2023-09-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jolaman4, 졸라맨4, jolaman4@gmail.com, 2023-09-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: laster, 라스터, laster@gmail.com, 2023-09-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack777, 잭, jack777@gmail.com, 2023-09-04
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jack888, 잭, jack888@gmail.com, 2023-09-04
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony33, 손흥민, sony33@gamil.com, 2023-09-04
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony44, 손흥민, sony44@gamil.com, 2023-09-04
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: woosung, 이우성, woosung@gmail.com, 2023-08-23
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry4444, 방그리, tester444@gmail.com, 2023-08-23
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin5, 이순신, soonsin5@gmail.com, 2023-08-23
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin, 이순신, soonsin@gmail.com, 2023-08-22
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: soonsin2, 100, soonsin2@gmail.com, 2023-08-22
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanhopark2, 박찬호, chanhopark@gmail.com, 2023-08-22
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry333, 김기정33, bangry33@gmail.com, 2023-08-22
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung1, 이희영, tester@gmail.com, 2023-08-22
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanghoon2, 박상훈2, sanghoon@gmail.com, 2023-08-22
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sanhoon, 박상훈, sanhoon@gmail.com, 2023-08-22
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong1, 홍길동1, gildong1@gmail.com, 2023-08-21
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: gildong2, 홍길동2, gildong2@gmail.com, 2023-08-21
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: sony, 손흥민, sony@gmail.com, 2023-08-18
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: friday, 금요일, friday@gmail.com, 2023-08-09
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: thursday, 목요일, thursday@gmail.com, 2023-08-08
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: wednesday, 수요일, wednesday@gmail.com, 2023-08-08
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tuesday, 화요일, tuesday@gmail.com, 2023-08-08
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: monday, 월요일, monday@gmail.com, 2023-08-08
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: abdedge, 조영호, bangry3d3@gmail.com, 2023-07-21
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: minjae, 김민재, minjae@gmail.com, 2023-07-20
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangin, 이강인, kangin@gmail.com, 2023-07-20
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: admin, 관리자, admin@gmail.com, 2023-07-20
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: tester1, 테스터, tester1@gmail.com, 2023-07-20
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james1, 제임스1, james1@gmail.com, 2023-07-19
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: james, 제임스, james@gmail.com, 2023-07-19
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: babo, 김바보, babo@gmail.com, 2023-07-14
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: junheyk, 이준혁, junheyk@gmail.com, 2023-07-14
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choikingj, 최기정, choikingj@gmail.com, 2023-07-14
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: lee, 이현, lee@gmail.com, 2023-07-14
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: eunbi, 최은비, eunbi@gami.com, 2023-07-14
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: honggal, 홍갈동, honggal@gmail.com, 2023-07-14
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heynsook, 김현숙, heynsook@gamil.com, 2023-07-12
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kunhoo, 김건후, kunhoo@gmail.com, 2023-07-12
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heymin, ê¹íë¯¼, heymin@gmail.com, 2023-07-12
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: looney, 김루니, looney@gmail.com, 2023-07-12
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: chanho, 박찬호, chanho@gmail.com, 2023-07-11
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: youngho, 조영호, youngho@gmail.com, 2023-07-11
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jisung, 박지성, jisung@gmail.com, 2023-07-11
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kang, 강소영, kang@gmail.com, 2023-07-10
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: hansol, 이한솔, hansol@gmail.com, 2023-07-10
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung2, 이희영, heeyoung2@gmail.com, 2023-07-07
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: jongwon, 김종원, jongwon@gmail.com, 2023-07-07
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: heeyoung, 이희영, heeyoung@gmail.com, 2023-07-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: choigry, 최기정, choigry@gmail.com, 2023-07-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: leegry, 이기정, leegry@gmail.com, 2023-07-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: kangry, 강기정, kangry@gmail.com, 2023-07-06
[2023-09-06 10:01:47][http-nio-80-exec-5][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: park, 박상훈, dfdfd31@kakao.com, 2023-07-06
[2023-09-06 10:01:47][http-nio-80-exec-5][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 57
[2023-09-06 10:02:01][http-nio-80-exec-9][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /board/article
[2023-09-06 10:02:01][http-nio-80-exec-9][INFO ](LoginCheckInterceptor.java: preHandle(): 28) : => 로그인 하지 않은 사용자 요청으로 로그인 화면으로 리다이렉트
[2023-09-06 10:02:06][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => com.ezen.springmvc.domain.member.service.MemberServiceImpl#MemberServiceImpl.isMember(..)비즈니스 메소드 실행
[2023-09-06 10:02:06][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:02:06][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 10:02:06][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 28) : => jdk.proxy15.$Proxy111#MemberMapper.findByIdAndPasswd(..)비즈니스 메소드 실행
[2023-09-06 10:02:06][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / bangry
[2023-09-06 10:02:06][http-nio-80-exec-7][INFO ](LoggerAspect.java: aroundLog(): 30) :   -> 전달인자 : java.lang.String / 1111
[2023-09-06 10:02:06][http-nio-80-exec-7][DEBUG](DataSourceUtils.java: doGetConnection(): 117) : Fetching JDBC Connection from DataSource
[2023-09-06 10:02:06][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==>  Preparing: SELECT id, name, email, TO_CHAR(regdate, 'yyyy-MM-DD HH24:MI:SS') regdate FROM member WHERE id = ? AND passwd = ?
[2023-09-06 10:02:06][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : ==> Parameters: bangry(String), 1111(String)
[2023-09-06 10:02:06][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==    Columns: ID, NAME, EMAIL, REGDATE
[2023-09-06 10:02:06][http-nio-80-exec-7][TRACE](BaseJdbcLogger.java: trace(): 143) : <==        Row: bangry, 김기정, bangry313@gmail.com, 2023-07-06 15:38:05
[2023-09-06 10:02:06][http-nio-80-exec-7][DEBUG](BaseJdbcLogger.java: debug(): 137) : <==      Total: 1
[2023-09-06 10:02:06][http-nio-80-exec-7][WARN ](MemberController.java: login(): 149) : /board/article
[2023-09-06 10:02:06][http-nio-80-exec-8][INFO ](LoginCheckInterceptor.java: preHandle(): 23) : => [로그인 체크 인터셉터 실행] : /board/article
[2023-09-06 10:02:06][http-nio-80-exec-8][INFO ](BoardController.java: articleList(): 23) : 게시글 목록 요청
[2023-09-06 10:02:38][RMI TCP Connection(44)-127.0.0.1][INFO ](SpringApplicationAdminMXBeanRegistrar.java: shutdown(): 159) : Application shutdown requested.
[2023-09-06 10:02:38][RMI TCP Connection(44)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Stopping service [Tomcat]
[2023-09-06 10:02:38][RMI TCP Connection(44)-127.0.0.1][INFO ](DirectJDKLog.java: log(): 173) : Destroying Spring FrameworkServlet 'dispatcherServlet'
[2023-09-06 10:02:38][RMI TCP Connection(44)-127.0.0.1][WARN ](DirectJDKLog.java: log(): 173) : The web application [ROOT] appears to have started a thread named [HikariPool-5 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.8/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.8/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
[2023-09-06 10:02:38][RMI TCP Connection(44)-127.0.0.1][INFO ](HikariDataSource.java: close(): 350) : HikariPool-5 - Shutdown initiated...
[2023-09-06 10:02:38][RMI TCP Connection(44)-127.0.0.1][INFO ](HikariDataSource.java: close(): 352) : HikariPool-5 - Shutdown completed.
